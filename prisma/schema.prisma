// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Pants {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  category     String
  title        String
  price        Int
  length       Int
  waistline    String
  weight       Int
  material     String
  quantity     Int
  
  // Images spécifiques
  imageFace       String  // Vue de face (image principale)
  imageCoteDroit  String? // Vue côté droit
  imageCoteGauche String? // Vue côté gauche
  imageDos        String? // Vue de dos
  imageDessus     String? // Vue du dessus
  imageEnsemble   String? // Vue d'ensemble (pour hover)
  imageDetaillee  String? // Vue détaillée
  imageEtiquette  String? // Composition/Étiquette
}

model Shirts {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  category     String
  title        String
  price        Int
  length       Int
  weight       Int
  material     String
  quantity     Int
  
  // Images spécifiques
  imageFace       String  // Vue de face (image principale)
  imageCoteDroit  String? // Vue côté droit
  imageCoteGauche String? // Vue côté gauche
  imageDos        String? // Vue de dos
  imageDessus     String? // Vue du dessus
  imageEnsemble   String? // Vue d'ensemble (pour hover)
  imageDetaillee  String? // Vue détaillée
  imageEtiquette  String? // Composition/Étiquette
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  email             String     @unique
  firstName         String?
  lastName          String?
  image             String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  addressLine1      String?
  addressLine2      String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  purchases         Purchase[]
}

model Purchase {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String?
  lastName          String?
  originalId        String   @db.ObjectId
  quantity          Int
  totalPrice        Int
  email             String
  addressLine1      String?
  addressLine2      String?
  addressCity       String?
  addressState      String?
  addressPostalCode String?
  addressCountry    String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [email], references: [email], onDelete: Cascade) // Relation vers User
}
